1. üîê P√°gina de Login (/login)
Campos:
Email

Senha

Funcionalidade:
Autentica usu√°rio com hash de senha (bcrypt)

Inicia sess√£o segura (Flask-Login ou session com secure_cookie)

Redireciona para o Dashboard com base no papel do usu√°rio (admin, gerente, funcion√°rio)

Seguran√ßa:
Senhas criptografadas com bcrypt

Rate limiting (limitar tentativas de login)

CSRF Token no formul√°rio

Prote√ß√£o contra XSS com Jinja2 autoescaping

Sess√£o expira por inatividade (uso de PERMANENT_SESSION_LIFETIME)

2. üè† Dashboard (/dashboard)
Exibe:
Total de OS por status (abertas, em andamento, fechadas)

Faturamento do m√™s

√öltimas a√ß√µes (logs)

Alertas (ex: OS vencidas, clientes inativos)

Seguran√ßa:
Acesso apenas com login

Autoriza√ß√£o por papel (@login_required + checagem do tipo de usu√°rio)

Todas as vari√°veis do Jinja2 autoescapadas

3. üìÅ Ordens de Servi√ßo (/os)
Funcionalidades:
Criar nova OS

Editar OS existente

Fechar OS (gera info da NF-e)

Listagem com filtros por:

Cliente

Respons√°vel

Status

Data

Seguran√ßa:
Prote√ß√£o contra SQL Injection via SQLAlchemy

CSRF nos formul√°rios de cria√ß√£o/edi√ß√£o

Escapamento de entrada do usu√°rio nos templates

Verifica√ß√£o de sess√£o e permiss√£o antes de qualquer a√ß√£o

4. üë§ Cadastro de Clientes (/clientes)
Funcionalidades:
Adicionar novo cliente

Editar cliente existente

Visualizar maquin√°rios de um cliente

Excluir cliente (somente admin)

Campos:
Nome

CNPJ ou CPF

Email

Telefone

Endere√ßo

Seguran√ßa:
Valida√ß√£o de CNPJ/CPF

Sanitiza√ß√£o e escapamento de dados nos templates

Prote√ß√£o contra CSRF

A√ß√µes restritas por papel

5. üõ†Ô∏è Cadastro de Maquin√°rios (/maquinarios)
Funcionalidades:
Listar maquin√°rios de um cliente

Adicionar novo equipamento

Editar dados de equipamento

Hist√≥rico de manuten√ß√µes

Campos:
Tipo

Marca

Modelo

N¬∫ de S√©rie

Ano

√öltima manuten√ß√£o

Seguran√ßa:
Dados vinculados ao cliente via chave estrangeira segura

Escapamento no template

CSRF nos formul√°rios

6. üë∑ Gest√£o de Funcion√°rios (/funcionarios)
Funcionalidades:
Listar todos os funcion√°rios

Adicionar novo funcion√°rio

Editar dados (nome, cargo, email)

Ativar/desativar conta

Acesso:
Gerente: pode ver

Admin: pode editar/criar/desativar

Seguran√ßa:
Apenas admin pode alterar cargos ou desativar usu√°rios

Emails √∫nicos validados

A√ß√µes registradas no log

7. üí∞ Financeiro (/financeiro)
Funcionalidades:
Registrar entrada (vinculada √† OS)

Registrar sa√≠da (gastos diversos)

Filtrar por per√≠odo

Exportar relat√≥rio (CSV)

Resumo mensal: receita x despesa

Seguran√ßa:
Apenas administradores e gerentes podem acessar

Prote√ß√£o contra CSRF

Exporta√ß√£o s√≥ por usu√°rios autenticados

Logs de todas as a√ß√µes financeiras

8. üìú Logs de A√ß√£o (/logs)
Exibe:
Login/logout de usu√°rios

Cria√ß√£o/edi√ß√£o de OS, clientes, maquin√°rios

A√ß√µes financeiras

Seguran√ßa:
Apenas administradores t√™m acesso

Imut√°vel (somente leitura)

9. üßæ Gera√ß√£o de NF-e (PDF ou visualiza√ß√£o)
Detalhes:
Gera√ß√£o autom√°tica ap√≥s fechamento de OS

Layout responsivo para impress√£o

Poss√≠vel exportar em PDF

Seguran√ßa:
NF-e s√≥ acess√≠vel por usu√°rios com permiss√£o

Campos validados e escapados

10. üß∞ Configura√ß√µes e Perfil (/perfil)
Funcionalidades:
Alterar nome

Alterar email

Alterar senha (com verifica√ß√£o da senha atual)

Seguran√ßa:
Hash da nova senha com bcrypt

Verifica√ß√£o da senha atual antes da troca

Tokens CSRF

üîí Seguran√ßa Detalhada por Tipo de Amea√ßa
Amea√ßa	A√ß√£o de Mitiga√ß√£o
SQL Injection	Uso exclusivo do SQLAlchemy ORM e par√¢metros preparados
CSRF	Uso de Flask-WTF ou manual via tokens com {{ csrf_token() }} nos formul√°rios
XSS	Uso de {{ variable }} (autoescapado) no Jinja2 + valida√ß√£o/sanitiza√ß√£o manual
Sess√£o/Hijack	Sess√£o via cookie seguro (secure, httponly, samesite='Lax') + expira√ß√£o
For√ßa Bruta	Rate limit em login + captcha opcional + bloqueio ap√≥s N tentativas
Acesso indevido	Decoradores @login_required e @role_required('admin') em rotas cr√≠ticas